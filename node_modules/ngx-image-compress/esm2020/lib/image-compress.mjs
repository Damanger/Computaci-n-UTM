var _a;
import { DOC_ORIENTATION } from './models/DOC_ORIENTATION';
export class ImageCompress {
}
_a = ImageCompress;
ImageCompress.getOrientation = (file) => new Promise((resolve, reject) => {
    try {
        const reader = new FileReader();
        reader.onload = () => {
            const view = new DataView(reader.result);
            if (!view.byteLength) {
                return resolve(DOC_ORIENTATION.NotDefined);
            }
            if (view.getUint16(0, false) !== 0xffd8) {
                return resolve(DOC_ORIENTATION.NotDefined);
            }
            const length = view.byteLength;
            let offset = 2;
            while (offset < length) {
                const marker = view.getUint16(offset, false);
                offset += 2;
                if (marker === 0xffe1) {
                    if (view.getUint32((offset += 2), false) !== 0x45786966) {
                        return resolve(DOC_ORIENTATION.NotJpeg);
                    }
                    const little = view.getUint16((offset += 6), false) === 0x4949;
                    offset += view.getUint32(offset + 4, little);
                    const tags = view.getUint16(offset, little);
                    offset += 2;
                    for (let i = 0; i < tags; i++) {
                        if (view.getUint16(offset + i * 12, little) === 0x0112) {
                            return resolve(view.getUint16(offset + i * 12 + 8, little));
                        }
                    }
                }
                else if ((marker & 0xff00) !== 0xff00) {
                    break;
                }
                else {
                    offset += view.getUint16(offset, false);
                }
            }
            return resolve(DOC_ORIENTATION.NotJpeg);
        };
        reader.readAsArrayBuffer(file);
    }
    catch (e) {
        return reject(DOC_ORIENTATION.Default);
    }
});
ImageCompress.uploadFile = (render, multiple = true, rejectOnCancel = false) => new Promise(function (resolve, reject) {
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    const isIOS = /iPad|iPhone|iPod/i.test(navigator.userAgent);
    Promise.resolve(isSafari || isIOS)
        .then(onlyNative => {
        if (onlyNative) {
            return ImageCompress.generateUploadInputNative(window.document, multiple, rejectOnCancel);
        }
        else {
            return ImageCompress.generateUploadInputRenderer(render, multiple, rejectOnCancel);
        }
    })
        .then((filesList) => {
        const files = filesList ? Array.from(filesList) : [];
        const orientationPromises = files.map(file => ImageCompress.getOrientation(file));
        const readerPromises = files.map(file => ImageCompress.fileToDataURL(file));
        let orientationsResult = [];
        Promise.all(orientationPromises)
            .then((orientations) => {
            orientationsResult = orientations;
            return Promise.all(readerPromises);
        })
            .then(readerResult => {
            const resultArray = readerResult.map((parsedFile, index) => ({
                image: parsedFile.dataUrl,
                orientation: orientationsResult[index],
                fileName: parsedFile.fileName,
            }));
            if (multiple) {
                resolve(resultArray);
            }
            else {
                resolve(resultArray[0]);
            }
        });
    })
        .catch(err => reject(err));
});
ImageCompress.fileToDataURL = (file) => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = (e) => {
            //myReader.onloadend = (progressEvent: ProgressEvent<FileReader>)
            resolve({ dataUrl: e.target.result, fileName: file.name });
        };
        try {
            reader.readAsDataURL(file);
        }
        catch (e) {
            reject(`ngx-image-compress - probably no file have been selected: ${e}`);
        }
    });
};
ImageCompress.generateUploadInputRenderer = (render, multiple = true, rejectOnCancel = false) => {
    let lock = false;
    return new Promise((resolve, reject) => {
        const inputElement = render.createElement('input');
        render.setStyle(inputElement, 'display', 'none');
        render.setProperty(inputElement, 'type', 'file');
        render.setProperty(inputElement, 'accept', 'image/*');
        if (multiple) {
            render.setProperty(inputElement, 'multiple', 'true');
        }
        render.listen(inputElement, 'click', ($event) => {
            $event.target.value = '';
        });
        render.listen(inputElement, 'change', $event => {
            lock = true;
            const files = $event.target.files;
            resolve(files);
        });
        if (rejectOnCancel) {
            window.addEventListener('focus', () => {
                setTimeout(() => {
                    if (!lock) {
                        reject(new Error('file upload on blur - no file selected'));
                    }
                }, 300);
            }, { once: true });
        }
        inputElement.click();
    });
};
ImageCompress.generateUploadInputNative = (documentNativeApi, multiple = true, rejectOnCancel = false) => {
    let lock = false;
    return new Promise((resolve, reject) => {
        const inputElement = documentNativeApi.createElement('input');
        inputElement.id = 'upload-input' + new Date();
        inputElement.style.display = 'none';
        inputElement.setAttribute('type', 'file');
        inputElement.setAttribute('accept', 'image/*');
        if (multiple) {
            inputElement.setAttribute('multiple', 'true');
        }
        documentNativeApi.body.appendChild(inputElement);
        inputElement.addEventListener('change', () => {
            lock = true;
            resolve(inputElement.files);
            documentNativeApi.body.removeChild(documentNativeApi.getElementById(inputElement.id));
        }, { once: true });
        if (rejectOnCancel) {
            window.addEventListener('focus', () => {
                setTimeout(() => {
                    if (!lock && documentNativeApi.getElementById(inputElement.id)) {
                        reject(new Error('file upload on blur - no file selected'));
                        documentNativeApi.body.removeChild(documentNativeApi.getElementById(inputElement.id));
                    }
                }, 300);
            }, { once: true });
        }
        // open file select box
        inputElement.click();
    });
};
ImageCompress.compress = (imageDataUrlSource, orientation, render, ratio = 50, quality = 50, maxwidth = 0, maxheight = 0) => new Promise(function (resolve, reject) {
    quality = quality / 100;
    ratio = ratio / 100;
    const sourceImage = new Image();
    // important for safari: we need to wait for onload event
    sourceImage.onload = () => {
        const canvas = render.createElement('canvas');
        const ctx = canvas.getContext('2d');
        if (!ctx) {
            return reject(`No canvas context available`);
        }
        let w = sourceImage.naturalWidth;
        let h = sourceImage.naturalHeight;
        if (!CSS.supports('image-orientation', 'from-image')) {
            if (orientation === DOC_ORIENTATION.Right || orientation === DOC_ORIENTATION.Left) {
                const t = w;
                w = h;
                h = t;
            }
        }
        let xratio = maxwidth ? maxwidth / w : 1;
        let yratio = maxheight ? maxheight / h : 1;
        ratio = Math.min(ratio, xratio, yratio);
        canvas.width = w * ratio;
        canvas.height = h * ratio;
        const TO_RADIANS = Math.PI / 180;
        if (CSS.supports('image-orientation', 'from-image') || orientation === DOC_ORIENTATION.Up) {
            ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);
        }
        else if (orientation === DOC_ORIENTATION.Right) {
            ctx.save();
            ctx.rotate(90 * TO_RADIANS);
            ctx.translate(0, -canvas.width);
            ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);
            ctx.restore();
        }
        else if (orientation === DOC_ORIENTATION.Left) {
            ctx.save();
            ctx.rotate(-90 * TO_RADIANS);
            ctx.translate(-canvas.width, 0);
            ctx.drawImage(sourceImage, 0, 0, canvas.height, canvas.width);
            ctx.restore();
        }
        else if (orientation === DOC_ORIENTATION.Down) {
            ctx.save();
            ctx.rotate(180 * TO_RADIANS);
            ctx.translate(-canvas.width, -canvas.height);
            ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);
            ctx.restore();
        }
        else {
            // no orientation value found - same as default UP
            ctx.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);
        }
        const mime = imageDataUrlSource.substr(5, imageDataUrlSource.split(';')[0].length - 5);
        // TODO test on mime
        const result = canvas.toDataURL(mime, quality);
        resolve(result);
    };
    sourceImage.onerror = e => reject(e);
    sourceImage.src = imageDataUrlSource;
});
ImageCompress.byteCount = (imgString) => encodeURI(imgString).split(/%..|./).length - 1;
ImageCompress.getImageMaxSize = async (maxSizeMb, debugMode, render, rejectOnCancel = false) => {
    const MAX_TRIES = 10;
    const bytesToMB = (bytes) => (bytes / 1024 / 1024).toFixed(2);
    if (debugMode) {
        console.debug('NgxImageCompress - Opening upload window');
    }
    let myFile = (await ImageCompress.uploadFile(render, false, rejectOnCancel));
    let compressedFile;
    for (let i = 0; i < MAX_TRIES; i++) {
        const previousSize = ImageCompress.byteCount(myFile.image);
        compressedFile = await ImageCompress.compress(myFile.image, myFile.orientation, render, 50, 100);
        const newSize = ImageCompress.byteCount(compressedFile);
        console.debug('NgxImageCompress -', 'Compression from', bytesToMB(previousSize), 'MB to', bytesToMB(newSize), 'MB');
        if (newSize >= previousSize) {
            if (i === 0) {
                if (debugMode) {
                    console.debug('NgxImageCompress -', "File can't be reduced at all - returning the original", bytesToMB(previousSize), 'MB large');
                }
                throw myFile.image;
            }
            else {
                if (debugMode) {
                    console.debug('NgxImageCompress -', "File can't be reduced more - returning the best we can, which is ", bytesToMB(previousSize), 'MB large');
                }
                throw myFile.image;
            }
        }
        else {
            if (newSize < maxSizeMb * 1024 * 1024) {
                if (debugMode) {
                    console.debug('NgxImageCompress -', 'Here your file', bytesToMB(newSize), 'MB large');
                }
                return compressedFile;
            }
            else if (i === 9) {
                if (debugMode) {
                    console.debug('NgxImageCompress -', "File can't reach the desired size after", MAX_TRIES, 'tries. Returning file ', bytesToMB(previousSize), 'MB large');
                }
                throw myFile.image;
            }
        }
        if (debugMode) {
            console.debug('NgxImageCompress -', 'Reached', bytesToMB(newSize), 'MB large. Trying another time after', i + 1, 'times');
        }
        myFile.image = compressedFile;
    }
    if (debugMode) {
        console.debug('NgxImageCompress - Unexpected error');
    }
    throw '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtY29tcHJlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtaW1hZ2UtY29tcHJlc3Mvc3JjL2xpYi9pbWFnZS1jb21wcmVzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBR3pELE1BQU0sT0FBTyxhQUFhOzs7QUFDZiw0QkFBYyxHQUFHLENBQUMsSUFBVSxFQUE0QixFQUFFLENBQzdELElBQUksT0FBTyxDQUFrQixDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUM3QyxJQUFJO1FBQ0EsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUNoQyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRTtZQUNqQixNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBcUIsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNsQixPQUFPLE9BQU8sQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDOUM7WUFDRCxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLE1BQU0sRUFBRTtnQkFDckMsT0FBTyxPQUFPLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQzlDO1lBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztZQUMvQixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDZixPQUFPLE1BQU0sR0FBRyxNQUFNLEVBQUU7Z0JBQ3BCLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO2dCQUM3QyxNQUFNLElBQUksQ0FBQyxDQUFDO2dCQUNaLElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtvQkFD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YUFDekI7aUJBQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNoQixJQUFJLFNBQVMsRUFBRTtvQkFDWCxPQUFPLENBQUMsS0FBSyxDQUNULG9CQUFvQixFQUNwQix5Q0FBeUMsRUFDekMsU0FBUyxFQUNULHdCQUF3QixFQUN4QixTQUFTLENBQUMsWUFBWSxDQUFDLEVBQ3ZCLFVBQVUsQ0FDYixDQUFDO2lCQUNMO2dCQUNELE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQzthQUN0QjtTQUNKO1FBQ0QsSUFBSSxTQUFTLEVBQUU7WUFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUUscUNBQXFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM3SDtRQUNELE1BQU0sQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDO0tBQ2pDO0lBQ0QsSUFBSSxTQUFTLEVBQUU7UUFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7S0FDeEQ7SUFDRCxNQUFNLEVBQUUsQ0FBQztBQUNiLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVuZGVyZXIyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RGF0YVVybH0gZnJvbSAnLi9tb2RlbHMvZGF0YS11cmwnO1xuaW1wb3J0IHtET0NfT1JJRU5UQVRJT059IGZyb20gJy4vbW9kZWxzL0RPQ19PUklFTlRBVElPTic7XG5pbXBvcnQge1VwbG9hZFJlc3BvbnNlfSBmcm9tICcuL21vZGVscy91cGxvYWQtcmVzcG9uc2UnO1xuXG5leHBvcnQgY2xhc3MgSW1hZ2VDb21wcmVzcyB7XG4gICAgc3RhdGljIGdldE9yaWVudGF0aW9uID0gKGZpbGU6IEZpbGUpOiBQcm9taXNlPERPQ19PUklFTlRBVElPTj4gPT5cbiAgICAgICAgbmV3IFByb21pc2U8RE9DX09SSUVOVEFUSU9OPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhyZWFkZXIucmVzdWx0IGFzIEFycmF5QnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2aWV3LmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKERPQ19PUklFTlRBVElPTi5Ob3REZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodmlldy5nZXRVaW50MTYoMCwgZmFsc2UpICE9PSAweGZmZDgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKERPQ19PUklFTlRBVElPTi5Ob3REZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsZW5ndGggPSB2aWV3LmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGxldCBvZmZzZXQgPSAyO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAob2Zmc2V0IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXJrZXIgPSB2aWV3LmdldFVpbnQxNihvZmZzZXQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlciA9PT0gMHhmZmUxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcuZ2V0VWludDMyKChvZmZzZXQgKz0gMiksIGZhbHNlKSAhPT0gMHg0NTc4Njk2Nikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZShET0NfT1JJRU5UQVRJT04uTm90SnBlZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpdHRsZSA9IHZpZXcuZ2V0VWludDE2KChvZmZzZXQgKz0gNiksIGZhbHNlKSA9PT0gMHg0OTQ5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSB2aWV3LmdldFVpbnQzMihvZmZzZXQgKyA0LCBsaXR0bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZ3MgPSB2aWV3LmdldFVpbnQxNihvZmZzZXQsIGxpdHRsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWdzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZpZXcuZ2V0VWludDE2KG9mZnNldCArIGkgKiAxMiwgbGl0dGxlKSA9PT0gMHgwMTEyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh2aWV3LmdldFVpbnQxNihvZmZzZXQgKyBpICogMTIgKyA4LCBsaXR0bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKG1hcmtlciAmIDB4ZmYwMCkgIT09IDB4ZmYwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gdmlldy5nZXRVaW50MTYob2Zmc2V0LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoRE9DX09SSUVOVEFUSU9OLk5vdEpwZWcpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoRE9DX09SSUVOVEFUSU9OLkRlZmF1bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIHN0YXRpYyB1cGxvYWRGaWxlID0gKHJlbmRlcjogUmVuZGVyZXIyLCBtdWx0aXBsZTogYm9vbGVhbiA9IHRydWUsIHJlamVjdE9uQ2FuY2VsID0gZmFsc2UpOiBQcm9taXNlPFVwbG9hZFJlc3BvbnNlIHwgVXBsb2FkUmVzcG9uc2VbXT4gPT5cbiAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgY29uc3QgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICAgICAgY29uc3QgaXNJT1MgPSAvaVBhZHxpUGhvbmV8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZShpc1NhZmFyaSB8fCBpc0lPUylcbiAgICAgICAgICAgICAgICAudGhlbihvbmx5TmF0aXZlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9ubHlOYXRpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJbWFnZUNvbXByZXNzLmdlbmVyYXRlVXBsb2FkSW5wdXROYXRpdmUod2luZG93LmRvY3VtZW50LCBtdWx0aXBsZSwgcmVqZWN0T25DYW5jZWwpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEltYWdlQ29tcHJlc3MuZ2VuZXJhdGVVcGxvYWRJbnB1dFJlbmRlcmVyKHJlbmRlciwgbXVsdGlwbGUsIHJlamVjdE9uQ2FuY2VsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oKGZpbGVzTGlzdDogRmlsZUxpc3QgfCBudWxsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVzID0gZmlsZXNMaXN0ID8gQXJyYXkuZnJvbShmaWxlc0xpc3QpIDogW107XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9yaWVudGF0aW9uUHJvbWlzZXMgPSBmaWxlcy5tYXAoZmlsZSA9PiBJbWFnZUNvbXByZXNzLmdldE9yaWVudGF0aW9uKGZpbGUpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVhZGVyUHJvbWlzZXMgPSBmaWxlcy5tYXAoZmlsZSA9PiBJbWFnZUNvbXByZXNzLmZpbGVUb0RhdGFVUkwoZmlsZSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcmllbnRhdGlvbnNSZXN1bHQ6IERPQ19PUklFTlRBVElPTltdID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwob3JpZW50YXRpb25Qcm9taXNlcylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKChvcmllbnRhdGlvbnM6IERPQ19PUklFTlRBVElPTltdKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZW50YXRpb25zUmVzdWx0ID0gb3JpZW50YXRpb25zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChyZWFkZXJQcm9taXNlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVhZGVyUmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRBcnJheSA9IHJlYWRlclJlc3VsdC5tYXAoKHBhcnNlZEZpbGUsIGluZGV4KSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZTogcGFyc2VkRmlsZS5kYXRhVXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb25zUmVzdWx0W2luZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IHBhcnNlZEZpbGUuZmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0QXJyYXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0QXJyYXlbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XG4gICAgICAgIH0pO1xuXG4gICAgc3RhdGljIGZpbGVUb0RhdGFVUkwgPSAoZmlsZTogRmlsZSk6IFByb21pc2U8e2RhdGFVcmw6IHN0cmluZzsgZmlsZU5hbWU6IHN0cmluZ30+ID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHtkYXRhVXJsOiBzdHJpbmc7IGZpbGVOYW1lOiBzdHJpbmd9PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IChlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAvL215UmVhZGVyLm9ubG9hZGVuZCA9IChwcm9ncmVzc0V2ZW50OiBQcm9ncmVzc0V2ZW50PEZpbGVSZWFkZXI+KVxuICAgICAgICAgICAgICAgIHJlc29sdmUoe2RhdGFVcmw6IGUudGFyZ2V0LnJlc3VsdCwgZmlsZU5hbWU6IGZpbGUubmFtZX0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoZmlsZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGBuZ3gtaW1hZ2UtY29tcHJlc3MgLSBwcm9iYWJseSBubyBmaWxlIGhhdmUgYmVlbiBzZWxlY3RlZDogJHtlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgc3RhdGljIGdlbmVyYXRlVXBsb2FkSW5wdXRSZW5kZXJlciA9IChyZW5kZXI6IFJlbmRlcmVyMiwgbXVsdGlwbGU6IGJvb2xlYW4gPSB0cnVlLCByZWplY3RPbkNhbmNlbCA9IGZhbHNlKSA9PiB7XG4gICAgICAgIGxldCBsb2NrID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxGaWxlTGlzdCB8IG51bGw+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0RWxlbWVudCA9IHJlbmRlci5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgcmVuZGVyLnNldFN0eWxlKGlucHV0RWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICAgICAgcmVuZGVyLnNldFByb3BlcnR5KGlucHV0RWxlbWVudCwgJ3R5cGUnLCAnZmlsZScpO1xuICAgICAgICAgICAgcmVuZGVyLnNldFByb3BlcnR5KGlucHV0RWxlbWVudCwgJ2FjY2VwdCcsICdpbWFnZS8qJyk7XG5cbiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgIHJlbmRlci5zZXRQcm9wZXJ0eShpbnB1dEVsZW1lbnQsICdtdWx0aXBsZScsICd0cnVlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlbmRlci5saXN0ZW4oaW5wdXRFbGVtZW50LCAnY2xpY2snLCAoJGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgKCRldmVudC50YXJnZXQgYXMgYW55IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlID0gJyc7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVuZGVyLmxpc3RlbihpbnB1dEVsZW1lbnQsICdjaGFuZ2UnLCAkZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgIGxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpbGVzOiBGaWxlTGlzdCA9ICRldmVudC50YXJnZXQuZmlsZXM7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShmaWxlcyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHJlamVjdE9uQ2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICdmb2N1cycsXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdmaWxlIHVwbG9hZCBvbiBibHVyIC0gbm8gZmlsZSBzZWxlY3RlZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAzMDApO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7b25jZTogdHJ1ZX1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuY2xpY2soKTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHN0YXRpYyBnZW5lcmF0ZVVwbG9hZElucHV0TmF0aXZlID0gKGRvY3VtZW50TmF0aXZlQXBpOiBhbnksIG11bHRpcGxlOiBib29sZWFuID0gdHJ1ZSwgcmVqZWN0T25DYW5jZWwgPSBmYWxzZSkgPT4ge1xuICAgICAgICBsZXQgbG9jayA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2U8RmlsZUxpc3QgfCBudWxsPigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbnB1dEVsZW1lbnQgPSBkb2N1bWVudE5hdGl2ZUFwaS5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LmlkID0gJ3VwbG9hZC1pbnB1dCcgKyBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0eXBlJywgJ2ZpbGUnKTtcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FjY2VwdCcsICdpbWFnZS8qJyk7XG5cbiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgIGlucHV0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ3RydWUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZG9jdW1lbnROYXRpdmVBcGkuYm9keS5hcHBlbmRDaGlsZChpbnB1dEVsZW1lbnQpO1xuXG4gICAgICAgICAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAnY2hhbmdlJyxcbiAgICAgICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGlucHV0RWxlbWVudC5maWxlcyk7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50TmF0aXZlQXBpLmJvZHkucmVtb3ZlQ2hpbGQoZG9jdW1lbnROYXRpdmVBcGkuZ2V0RWxlbWVudEJ5SWQoaW5wdXRFbGVtZW50LmlkKSBhcyBOb2RlKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtvbmNlOiB0cnVlfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHJlamVjdE9uQ2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgICAgICdmb2N1cycsXG4gICAgICAgICAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbG9jayAmJiBkb2N1bWVudE5hdGl2ZUFwaS5nZXRFbGVtZW50QnlJZChpbnB1dEVsZW1lbnQuaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoJ2ZpbGUgdXBsb2FkIG9uIGJsdXIgLSBubyBmaWxlIHNlbGVjdGVkJykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2N1bWVudE5hdGl2ZUFwaS5ib2R5LnJlbW92ZUNoaWxkKGRvY3VtZW50TmF0aXZlQXBpLmdldEVsZW1lbnRCeUlkKGlucHV0RWxlbWVudC5pZCkgYXMgTm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMzAwKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge29uY2U6IHRydWV9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gb3BlbiBmaWxlIHNlbGVjdCBib3hcbiAgICAgICAgICAgIGlucHV0RWxlbWVudC5jbGljaygpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgc3RhdGljIGNvbXByZXNzID0gKFxuICAgICAgICBpbWFnZURhdGFVcmxTb3VyY2U6IERhdGFVcmwsXG4gICAgICAgIG9yaWVudGF0aW9uOiBET0NfT1JJRU5UQVRJT04sXG4gICAgICAgIHJlbmRlcjogUmVuZGVyZXIyLFxuICAgICAgICByYXRpbzogbnVtYmVyID0gNTAsXG4gICAgICAgIHF1YWxpdHk6IG51bWJlciA9IDUwLFxuICAgICAgICBtYXh3aWR0aDogbnVtYmVyID0gMCxcbiAgICAgICAgbWF4aGVpZ2h0OiBudW1iZXIgPSAwXG4gICAgKTogUHJvbWlzZTxzdHJpbmc+ID0+XG4gICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHF1YWxpdHkgPSBxdWFsaXR5IC8gMTAwO1xuICAgICAgICAgICAgcmF0aW8gPSByYXRpbyAvIDEwMDtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUltYWdlID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgICAgIC8vIGltcG9ydGFudCBmb3Igc2FmYXJpOiB3ZSBuZWVkIHRvIHdhaXQgZm9yIG9ubG9hZCBldmVudFxuICAgICAgICAgICAgc291cmNlSW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQgPSByZW5kZXIuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgfCBudWxsID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWN0eCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGBObyBjYW52YXMgY29udGV4dCBhdmFpbGFibGVgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgdyA9IHNvdXJjZUltYWdlLm5hdHVyYWxXaWR0aDtcbiAgICAgICAgICAgICAgICBsZXQgaCA9IHNvdXJjZUltYWdlLm5hdHVyYWxIZWlnaHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoIUNTUy5zdXBwb3J0cygnaW1hZ2Utb3JpZW50YXRpb24nLCAnZnJvbS1pbWFnZScpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcmllbnRhdGlvbiA9PT0gRE9DX09SSUVOVEFUSU9OLlJpZ2h0IHx8IG9yaWVudGF0aW9uID09PSBET0NfT1JJRU5UQVRJT04uTGVmdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHc7XG4gICAgICAgICAgICAgICAgICAgICAgICB3ID0gaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSB0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IHhyYXRpbyA9IG1heHdpZHRoID8gbWF4d2lkdGggLyB3IDogMTtcbiAgICAgICAgICAgICAgICBsZXQgeXJhdGlvID0gbWF4aGVpZ2h0ID8gbWF4aGVpZ2h0IC8gaCA6IDE7XG4gICAgICAgICAgICAgICAgcmF0aW8gPSBNYXRoLm1pbihyYXRpbywgeHJhdGlvLCB5cmF0aW8pO1xuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IHcgKiByYXRpbztcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0ID0gaCAqIHJhdGlvO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgVE9fUkFESUFOUyA9IE1hdGguUEkgLyAxODA7XG5cbiAgICAgICAgICAgICAgICBpZiAoQ1NTLnN1cHBvcnRzKCdpbWFnZS1vcmllbnRhdGlvbicsICdmcm9tLWltYWdlJykgfHwgb3JpZW50YXRpb24gPT09IERPQ19PUklFTlRBVElPTi5VcCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHNvdXJjZUltYWdlLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob3JpZW50YXRpb24gPT09IERPQ19PUklFTlRBVElPTi5SaWdodCkge1xuICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjdHgucm90YXRlKDkwICogVE9fUkFESUFOUyk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC50cmFuc2xhdGUoMCwgLWNhbnZhcy53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2Uoc291cmNlSW1hZ2UsIDAsIDAsIGNhbnZhcy5oZWlnaHQsIGNhbnZhcy53aWR0aCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcmllbnRhdGlvbiA9PT0gRE9DX09SSUVOVEFUSU9OLkxlZnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJvdGF0ZSgtOTAgKiBUT19SQURJQU5TKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnRyYW5zbGF0ZSgtY2FudmFzLndpZHRoLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzb3VyY2VJbWFnZSwgMCwgMCwgY2FudmFzLmhlaWdodCwgY2FudmFzLndpZHRoKTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG9yaWVudGF0aW9uID09PSBET0NfT1JJRU5UQVRJT04uRG93bikge1xuICAgICAgICAgICAgICAgICAgICBjdHguc2F2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBjdHgucm90YXRlKDE4MCAqIFRPX1JBRElBTlMpO1xuICAgICAgICAgICAgICAgICAgICBjdHgudHJhbnNsYXRlKC1jYW52YXMud2lkdGgsIC1jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmRyYXdJbWFnZShzb3VyY2VJbWFnZSwgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBubyBvcmllbnRhdGlvbiB2YWx1ZSBmb3VuZCAtIHNhbWUgYXMgZGVmYXVsdCBVUFxuICAgICAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHNvdXJjZUltYWdlLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IG1pbWUgPSBpbWFnZURhdGFVcmxTb3VyY2Uuc3Vic3RyKDUsIGltYWdlRGF0YVVybFNvdXJjZS5zcGxpdCgnOycpWzBdLmxlbmd0aCAtIDUpO1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gdGVzdCBvbiBtaW1lXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gY2FudmFzLnRvRGF0YVVSTChtaW1lLCBxdWFsaXR5KTtcblxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNvdXJjZUltYWdlLm9uZXJyb3IgPSBlID0+IHJlamVjdChlKTtcbiAgICAgICAgICAgIHNvdXJjZUltYWdlLnNyYyA9IGltYWdlRGF0YVVybFNvdXJjZTtcbiAgICAgICAgfSk7XG5cbiAgICBzdGF0aWMgYnl0ZUNvdW50ID0gKGltZ1N0cmluZzogRGF0YVVybCk6IG51bWJlciA9PiBlbmNvZGVVUkkoaW1nU3RyaW5nKS5zcGxpdCgvJS4ufC4vKS5sZW5ndGggLSAxO1xuXG4gICAgc3RhdGljIGdldEltYWdlTWF4U2l6ZSA9IGFzeW5jIChtYXhTaXplTWI6IG51bWJlciwgZGVidWdNb2RlOiBib29sZWFuLCByZW5kZXI6IFJlbmRlcmVyMixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdE9uQ2FuY2VsID0gZmFsc2UpOiBQcm9taXNlPERhdGFVcmw+ID0+IHtcbiAgICAgICAgY29uc3QgTUFYX1RSSUVTID0gMTA7XG5cbiAgICAgICAgY29uc3QgYnl0ZXNUb01CID0gKGJ5dGVzOiBudW1iZXIpID0+IChieXRlcyAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpO1xuXG4gICAgICAgIGlmIChkZWJ1Z01vZGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ05neEltYWdlQ29tcHJlc3MgLSBPcGVuaW5nIHVwbG9hZCB3aW5kb3cnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBteUZpbGU6IFVwbG9hZFJlc3BvbnNlID0gKGF3YWl0IEltYWdlQ29tcHJlc3MudXBsb2FkRmlsZShyZW5kZXIsIGZhbHNlLCByZWplY3RPbkNhbmNlbCkpIGFzIFVwbG9hZFJlc3BvbnNlO1xuXG4gICAgICAgIGxldCBjb21wcmVzc2VkRmlsZTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1BWF9UUklFUzsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c1NpemUgPSBJbWFnZUNvbXByZXNzLmJ5dGVDb3VudChteUZpbGUuaW1hZ2UpO1xuICAgICAgICAgICAgY29tcHJlc3NlZEZpbGUgPSBhd2FpdCBJbWFnZUNvbXByZXNzLmNvbXByZXNzKG15RmlsZS5pbWFnZSwgbXlGaWxlLm9yaWVudGF0aW9uLCByZW5kZXIsIDUwLCAxMDApO1xuICAgICAgICAgICAgY29uc3QgbmV3U2l6ZSA9IEltYWdlQ29tcHJlc3MuYnl0ZUNvdW50KGNvbXByZXNzZWRGaWxlKTtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ05neEltYWdlQ29tcHJlc3MgLScsICdDb21wcmVzc2lvbiBmcm9tJywgYnl0ZXNUb01CKHByZXZpb3VzU2l6ZSksICdNQiB0bycsIGJ5dGVzVG9NQihuZXdTaXplKSwgJ01CJyk7XG4gICAgICAgICAgICBpZiAobmV3U2l6ZSA+PSBwcmV2aW91c1NpemUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVidWdNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdOZ3hJbWFnZUNvbXByZXNzIC0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRmlsZSBjYW4ndCBiZSByZWR1Y2VkIGF0IGFsbCAtIHJldHVybmluZyB0aGUgb3JpZ2luYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1RvTUIocHJldmlvdXNTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTUIgbGFyZ2UnXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG15RmlsZS5pbWFnZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGVidWdNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdOZ3hJbWFnZUNvbXByZXNzIC0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRmlsZSBjYW4ndCBiZSByZWR1Y2VkIG1vcmUgLSByZXR1cm5pbmcgdGhlIGJlc3Qgd2UgY2FuLCB3aGljaCBpcyBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieXRlc1RvTUIocHJldmlvdXNTaXplKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTUIgbGFyZ2UnXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG15RmlsZS5pbWFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChuZXdTaXplIDwgbWF4U2l6ZU1iICogMTAyNCAqIDEwMjQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlYnVnTW9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnTmd4SW1hZ2VDb21wcmVzcyAtJywgJ0hlcmUgeW91ciBmaWxlJywgYnl0ZXNUb01CKG5ld1NpemUpLCAnTUIgbGFyZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29tcHJlc3NlZEZpbGU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSA5KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWJ1Z01vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05neEltYWdlQ29tcHJlc3MgLScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJGaWxlIGNhbid0IHJlYWNoIHRoZSBkZXNpcmVkIHNpemUgYWZ0ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNQVhfVFJJRVMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RyaWVzLiBSZXR1cm5pbmcgZmlsZSAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5dGVzVG9NQihwcmV2aW91c1NpemUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNQiBsYXJnZSdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbXlGaWxlLmltYWdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkZWJ1Z01vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdOZ3hJbWFnZUNvbXByZXNzIC0nLCAnUmVhY2hlZCcsIGJ5dGVzVG9NQihuZXdTaXplKSwgJ01CIGxhcmdlLiBUcnlpbmcgYW5vdGhlciB0aW1lIGFmdGVyJywgaSArIDEsICd0aW1lcycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbXlGaWxlLmltYWdlID0gY29tcHJlc3NlZEZpbGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlYnVnTW9kZSkge1xuICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnTmd4SW1hZ2VDb21wcmVzcyAtIFVuZXhwZWN0ZWQgZXJyb3InKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAnJztcbiAgICB9O1xufVxuIl19